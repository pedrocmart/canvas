// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/pedrocmart/canvas/internal/core"
	"sync"
)

// Ensure, that ServiceMock does implement core.Service.
// If this is not the case, regenerate this file with moq.
var _ core.Service = &ServiceMock{}

// ServiceMock is a mock implementation of core.Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked core.Service
// 		mockedService := &ServiceMock{
// 			CanvasCreateFunc: func(contextMoqParam context.Context, canvasCreateRequest2 *core.CanvasCreateRequest2) (*core.CanvasCreateResponse, error) {
// 				panic("mock out the CanvasCreate method")
// 			},
// 			CanvasGetFunc: func(contextMoqParam context.Context, canvasGetRequest *core.CanvasGetRequest) (*core.CanvasGetResponse, error) {
// 				panic("mock out the CanvasGet method")
// 			},
// 		}
//
// 		// use mockedService in code that requires core.Service
// 		// and then make assertions.
//
// 	}
type ServiceMock struct {
	// CanvasCreateFunc mocks the CanvasCreate method.
	CanvasCreateFunc func(contextMoqParam context.Context, canvasCreateRequest2 *core.CanvasCreateRequest) (*core.CanvasCreateResponse, error)

	// CanvasGetFunc mocks the CanvasGet method.
	CanvasGetFunc func(contextMoqParam context.Context, canvasGetRequest *core.CanvasGetRequest) (*core.CanvasGetResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// CanvasCreate holds details about calls to the CanvasCreate method.
		CanvasCreate []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CanvasCreateRequest2 is the canvasCreateRequest2 argument value.
			CanvasCreateRequest2 *core.CanvasCreateRequest
		}
		// CanvasGet holds details about calls to the CanvasGet method.
		CanvasGet []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CanvasGetRequest is the canvasGetRequest argument value.
			CanvasGetRequest *core.CanvasGetRequest
		}
	}
	lockCanvasCreate sync.RWMutex
	lockCanvasGet    sync.RWMutex
}

// CanvasCreate calls CanvasCreateFunc.
func (mock *ServiceMock) CanvasCreate(contextMoqParam context.Context, canvasCreateRequest2 *core.CanvasCreateRequest) (*core.CanvasCreateResponse, error) {
	if mock.CanvasCreateFunc == nil {
		panic("ServiceMock.CanvasCreateFunc: method is nil but Service.CanvasCreate was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		CanvasCreateRequest2 *core.CanvasCreateRequest
	}{
		ContextMoqParam:      contextMoqParam,
		CanvasCreateRequest2: canvasCreateRequest2,
	}
	mock.lockCanvasCreate.Lock()
	mock.calls.CanvasCreate = append(mock.calls.CanvasCreate, callInfo)
	mock.lockCanvasCreate.Unlock()
	return mock.CanvasCreateFunc(contextMoqParam, canvasCreateRequest2)
}

// CanvasCreateCalls gets all the calls that were made to CanvasCreate.
// Check the length with:
//     len(mockedService.CanvasCreateCalls())
func (mock *ServiceMock) CanvasCreateCalls() []struct {
	ContextMoqParam      context.Context
	CanvasCreateRequest2 *core.CanvasCreateRequest
} {
	var calls []struct {
		ContextMoqParam      context.Context
		CanvasCreateRequest2 *core.CanvasCreateRequest
	}
	mock.lockCanvasCreate.RLock()
	calls = mock.calls.CanvasCreate
	mock.lockCanvasCreate.RUnlock()
	return calls
}

// CanvasGet calls CanvasGetFunc.
func (mock *ServiceMock) CanvasGet(contextMoqParam context.Context, canvasGetRequest *core.CanvasGetRequest) (*core.CanvasGetResponse, error) {
	if mock.CanvasGetFunc == nil {
		panic("ServiceMock.CanvasGetFunc: method is nil but Service.CanvasGet was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		CanvasGetRequest *core.CanvasGetRequest
	}{
		ContextMoqParam:  contextMoqParam,
		CanvasGetRequest: canvasGetRequest,
	}
	mock.lockCanvasGet.Lock()
	mock.calls.CanvasGet = append(mock.calls.CanvasGet, callInfo)
	mock.lockCanvasGet.Unlock()
	return mock.CanvasGetFunc(contextMoqParam, canvasGetRequest)
}

// CanvasGetCalls gets all the calls that were made to CanvasGet.
// Check the length with:
//     len(mockedService.CanvasGetCalls())
func (mock *ServiceMock) CanvasGetCalls() []struct {
	ContextMoqParam  context.Context
	CanvasGetRequest *core.CanvasGetRequest
} {
	var calls []struct {
		ContextMoqParam  context.Context
		CanvasGetRequest *core.CanvasGetRequest
	}
	mock.lockCanvasGet.RLock()
	calls = mock.calls.CanvasGet
	mock.lockCanvasGet.RUnlock()
	return calls
}
